{"version":3,"file":"ac-graph-core-js.umd.cjs","sources":["../src/graph/matching/GraphMatcher.ts","../src/graph/matching/UllmannGraphMatcher.ts","../src/graph/canon/GraphCanon.ts","../src/graph/ConnectedComponents.ts"],"sourcesContent":["import {Mapping} from '.';\nimport {Graph} from '..';\n\nexport abstract class GraphMatcher {\n\t/**\n\t * Subgraph isomorphism check\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t * @param nodeLabelWildcards Indices of pattern nodes considered wildcards\n\t * for labelled graphs. Their label is ignored during validation.\n\t * @param edgeLabelWildcards Indices of pattern edges considered wildcards\n\t * for labelled graphs. Their label is ignored during validation. Encoded\n\t * as \"sourceIndex + ',' + targetIndex\".\n\t * @param partialMapping Partial mapping of pattern nodes in target to only\n\t * find solutions containing this mapping. The array needs to follow the\n\t * same format as the Mapping type. Nodes not fixed in the partial mapping\n\t * are represented by -1.\n\t */\n\tpublic abstract isSubgraphIsomorphic(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tnodeLabelWildcards: number[],\n\t\tedgeLabelWildcards: string[],\n\t\tpartialMapping: number[] | null\n\t): boolean;\n\n\t/**\n\t * Collect all possible monomorphisms of the pattern graph in the target graph\n\t * including symmetries\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t * @param nodeLabelWildcards Indices of pattern nodes considered wildcards\n\t * for labelled graphs. Their label is ignored during validation.\n\t * @param edgeLabelWildcards Indices of pattern edges considered wildcards\n\t * for labelled graphs. Their label is ignored during validation. Encoded\n\t * as \"sourceIndex + ',' + targetIndex\".\n\t * @param partialMapping Partial mapping of pattern nodes in target to only\n\t * find solutions containing this mapping. The array needs to follow the\n\t * same format as the Mapping type. Nodes not fixed in the partial mapping\n\t * are represented by -1.\n\t */\n\tpublic abstract findAllSubgraphMonomorphisms(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tnodeLabelWildcards: number[],\n\t\tedgeLabelWildcards: string[],\n\t\tpartialMapping: number[] | null\n\t): Mapping[];\n}\n","import {Mapping} from '.';\nimport {Graph} from '..';\nimport {GraphMatcher} from './GraphMatcher';\n\nexport class UllmannGraphMatcher extends GraphMatcher {\n\t/**\n\t * Subgraph isomorphism check\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t * @param nodeLabelWildcards Indices of pattern nodes considered wildcards\n\t * for labelled graphs. Their label is ignored during validation.\n\t * @param edgeLabelWildcards Indices of pattern edges considered wildcards\n\t * for labelled graphs. Their label is ignored during validation. Encoded\n\t * as \"sourceIndex + ',' + targetIndex\".\n\t * @param partialMapping Partial mapping of pattern nodes in target to only\n\t * find solutions containing this mapping. The array needs to follow the\n\t * same format as the Mapping type. Nodes not fixed in the partial mapping\n\t * are represented by -1.\n\t */\n\tpublic override isSubgraphIsomorphic(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tnodeLabelWildcards: number[] = [],\n\t\tedgeLabelWildcards: string[] = [],\n\t\tpartialMapping: number[] | null = null\n\t): boolean {\n\t\t// Number of nodes in the pattern graph\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\t// Number of nodes in the target graph\n\t\tconst m = target.adjacencyMatrix.length;\n\t\t// If pattern is larger than target, no mapping is possible\n\t\tif (n > m) {\n\t\t\treturn false;\n\t\t}\n\t\tif (partialMapping === null) {\n\t\t\tpartialMapping = new Array<number>(n).fill(-1);\n\t\t}\n\t\tconst isLabeled = pattern.labels && target.labels;\n\t\t// Track which target nodes are already used in the mapping\n\t\tconst used = Array(m).fill(false);\n\t\tconst mapping = Array(n).fill(-1);\n\t\tconst nodeLabelWildcardsSet = new Set(nodeLabelWildcards);\n\t\tconst edgeLabelWildcardsSet = new Set(edgeLabelWildcards);\n\t\t// Pre-compute degrees for pattern and target nodes\n\t\tconst [\n\t\t\tpatternInDegrees,\n\t\t\tpatternOutDegrees,\n\t\t\ttargetInDegrees,\n\t\t\ttargetOutDegrees,\n\t\t] = this.getInOutDegrees(pattern, target);\n\t\t// Pre-compute candidate domains for pattern nodes based on degree\n\t\tconst domains: number[][] = patternInDegrees.map((pd, i) =>\n\t\t\ttargetInDegrees\n\t\t\t\t.map((td, j) => {\n\t\t\t\t\treturn td >= pd &&\n\t\t\t\t\t\ttargetOutDegrees[j] >= patternOutDegrees[i] &&\n\t\t\t\t\t\t(partialMapping[i] === -1 || partialMapping[i] === j) &&\n\t\t\t\t\t\t(!isLabeled ||\n\t\t\t\t\t\t\tnodeLabelWildcardsSet.has(i) ||\n\t\t\t\t\t\t\tpattern.labels![i] === target.labels![j])\n\t\t\t\t\t\t? j\n\t\t\t\t\t\t: -1;\n\t\t\t\t})\n\t\t\t\t.filter((j) => j !== -1)\n\t\t);\n\t\t// Recursive backtracking function to try all injective mappings\n\t\tconst match = (depth: number): boolean => {\n\t\t\tif (depth === n) {\n\t\t\t\treturn this.checkCompatibility(\n\t\t\t\t\tpattern,\n\t\t\t\t\ttarget,\n\t\t\t\t\tmapping,\n\t\t\t\t\tedgeLabelWildcardsSet\n\t\t\t\t);\n\t\t\t}\n\t\t\tfor (const candidate of domains[depth]) {\n\t\t\t\tif (!used[candidate]) {\n\t\t\t\t\tmapping[depth] = candidate;\n\t\t\t\t\tused[candidate] = true;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.isFeasible(\n\t\t\t\t\t\t\tpattern,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tmapping,\n\t\t\t\t\t\t\tdepth,\n\t\t\t\t\t\t\tedgeLabelWildcardsSet\n\t\t\t\t\t\t) &&\n\t\t\t\t\t\tmatch(depth + 1)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Backtrack\n\t\t\t\t\tused[candidate] = false;\n\t\t\t\t\tmapping[depth] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\treturn match(0);\n\t}\n\n\tprivate getInOutDegrees(\n\t\tpattern: Graph,\n\t\ttarget: Graph\n\t): [number[], number[], number[], number[]] {\n\t\tconst patternInDegrees = pattern.adjacencyMatrix.map((r) =>\n\t\t\tr.reduce((a, b) => a + b, 0)\n\t\t);\n\t\tconst patternOutDegrees: number[] = [];\n\t\tconst targetInDegrees = target.adjacencyMatrix.map((r) =>\n\t\t\tr.reduce((a, b) => a + b, 0)\n\t\t);\n\t\tconst targetOutDegrees: number[] = [];\n\t\tpattern.adjacencyMatrix.forEach((row, i) => {\n\t\t\tpatternOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => pattern.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t});\n\t\ttarget.adjacencyMatrix.forEach((row, i) => {\n\t\t\ttargetOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => target.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t});\n\t\treturn [\n\t\t\tpatternInDegrees,\n\t\t\tpatternOutDegrees,\n\t\t\ttargetInDegrees,\n\t\t\ttargetOutDegrees,\n\t\t];\n\t}\n\n\t/**\n\t * Collect all possible monomorphisms of the pattern graph in the target graph\n\t * including symmetries\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t * @param nodeLabelWildcards Indices of pattern nodes considered wildcards\n\t * for labelled graphs. Their label is ignored during validation.\n\t * @param edgeLabelWildcards Indices of pattern edges considered wildcards\n\t * for labelled graphs. Their label is ignored during validation. Encoded\n\t * as \"sourceIndex + ',' + targetIndex\".\n\t * @param partialMapping Partial mapping of pattern nodes in target to only\n\t * find solutions containing this mapping. The array needs to follow the\n\t * same format as the Mapping type. Nodes not fixed in the partial mapping\n\t * are represented by -1.\n\t */\n\tpublic override findAllSubgraphMonomorphisms(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tnodeLabelWildcards: number[] = [],\n\t\tedgeLabelWildcards: string[] = [],\n\t\tpartialMapping: number[] | null = null\n\t): Mapping[] {\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\tconst m = target.adjacencyMatrix.length;\n\t\tconst results: Mapping[] = [];\n\t\tconst nodeLabelWildcardsSet = new Set(nodeLabelWildcards);\n\t\tconst edgeLabelWildcardsSet = new Set(edgeLabelWildcards);\n\t\tif (n > m) {\n\t\t\treturn results;\n\t\t}\n\t\tif (partialMapping === null) {\n\t\t\tpartialMapping = new Array<number>(n).fill(-1);\n\t\t}\n\t\tconst isLabeled = pattern.labels && target.labels;\n\t\tconst used = Array(m).fill(false);\n\t\tconst mapping = Array(n).fill(-1);\n\t\tconst [\n\t\t\tpatternInDegrees,\n\t\t\tpatternOutDegrees,\n\t\t\ttargetInDegrees,\n\t\t\ttargetOutDegrees,\n\t\t] = this.getInOutDegrees(pattern, target);\n\t\tconst domains: number[][] = patternInDegrees.map((pd, i) =>\n\t\t\ttargetInDegrees\n\t\t\t\t.map((td, j) => {\n\t\t\t\t\treturn td >= pd &&\n\t\t\t\t\t\ttargetOutDegrees[j] >= patternOutDegrees[i] &&\n\t\t\t\t\t\t(partialMapping[i] === -1 || partialMapping[i] === j) &&\n\t\t\t\t\t\t(!isLabeled ||\n\t\t\t\t\t\t\tnodeLabelWildcardsSet.has(i) ||\n\t\t\t\t\t\t\tpattern.labels![i] === target.labels![j])\n\t\t\t\t\t\t? j\n\t\t\t\t\t\t: -1;\n\t\t\t\t})\n\t\t\t\t.filter((j) => j !== -1)\n\t\t);\n\t\tconst match = (depth: number): void => {\n\t\t\tif (depth === n) {\n\t\t\t\tif (\n\t\t\t\t\tthis.checkCompatibility(\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tmapping,\n\t\t\t\t\t\tedgeLabelWildcardsSet\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tresults.push([...mapping]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const candidate of domains[depth]) {\n\t\t\t\tif (!used[candidate]) {\n\t\t\t\t\tmapping[depth] = candidate;\n\t\t\t\t\tused[candidate] = true;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.isFeasible(\n\t\t\t\t\t\t\tpattern,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tmapping,\n\t\t\t\t\t\t\tdepth,\n\t\t\t\t\t\t\tedgeLabelWildcardsSet\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmatch(depth + 1);\n\t\t\t\t\t}\n\t\t\t\t\tused[candidate] = false;\n\t\t\t\t\tmapping[depth] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tmatch(0);\n\t\treturn results;\n\t}\n\n\t/**\n\t * Feasibility check for current depth: preserve pattern edges\n\t * and edge labels if present\n\t */\n\tprivate isFeasible(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tmapping: Mapping,\n\t\tdepth: number,\n\t\tedgeLabelWildcardsSet: Set<string>\n\t): boolean {\n\t\tconst isEdgeLabeled = pattern.edgeLabels && target.edgeLabels;\n\t\t// Check that all edges in the current partial mapping are preserved\n\t\tfor (let i = 0; i < depth; i++) {\n\t\t\tif (pattern.adjacencyMatrix[depth][i]) {\n\t\t\t\tif (!target.adjacencyMatrix[mapping[depth]][mapping[i]]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check edge labels if present\n\t\t\t\tif (\n\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\t!edgeLabelWildcardsSet.has(depth + ',' + i) &&\n\t\t\t\t\tpattern.edgeLabels![depth][i] !==\n\t\t\t\t\t\ttarget.edgeLabels![mapping[depth]][mapping[i]]\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pattern.adjacencyMatrix[i][depth]) {\n\t\t\t\tif (!target.adjacencyMatrix[mapping[i]][mapping[depth]]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check edge labels if present\n\t\t\t\tif (\n\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\t!edgeLabelWildcardsSet.has(i + ',' + depth) &&\n\t\t\t\t\tpattern.edgeLabels![i][depth] !==\n\t\t\t\t\t\ttarget.edgeLabels![mapping[i]][mapping[depth]]\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verifies full structural consistency of the mapping\n\t */\n\tprivate checkCompatibility(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tmapping: Mapping,\n\t\tedgeLabelWildcardsSet: Set<string>\n\t): boolean {\n\t\tconst isEdgeLabeled = pattern.edgeLabels && target.edgeLabels;\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tfor (let j = 0; j < n; j++) {\n\t\t\t\tif (pattern.adjacencyMatrix[i][j]) {\n\t\t\t\t\tif (!target.adjacencyMatrix[mapping[i]][mapping[j]]) {\n\t\t\t\t\t\t// Mapped nodes don't preserve an edge\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\t\t!edgeLabelWildcardsSet.has(i + ',' + j) &&\n\t\t\t\t\t\tpattern.edgeLabels![i][j] !==\n\t\t\t\t\t\t\ttarget.edgeLabels![mapping[i]][mapping[j]]\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Mapped nodes don't preserve an edge label\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n","import {Graph} from '..';\r\nimport {Mapping} from '../matching';\r\n\r\n/**\r\n * Nauty graph canonicalization using the following graph properties\r\n * for ordering and selection:\r\n * - First, node cell membership is sorted ascending by \"outDegree|inDegree|label?\"\r\n * - Second, direct neighborhood cell memberships and optional edge labels are sorted\r\n *   ascending, concatenated, and used to further split cells.\r\n *   \"neighborCell_1;outEdgeLabel_1?;inEdgeLabel_1?|neighborCell_2;outEdgeLabel_2?;inEdgeLabel_2?|...\"\r\n *   New cell IDs of the split are assigned by descending key order.\r\n * - Target cell selection in the search tree is performed by selecting the leftmost (smallest) cell ID\r\n *   with at least two members.\r\n *\r\n * TODO:\r\n * - Automorphism detection\r\n * - Search tree pruning\r\n */\r\nexport class GraphCanon {\r\n\tpublic static readonly DefaultNodeKeySuffixGenerator = (\r\n\t\tgraph: Graph,\r\n\t\tnodeIndex: number\r\n\t): string => {\r\n\t\treturn graph.labels ? graph.labels[nodeIndex] : '';\r\n\t};\r\n\r\n\tprivate readonly nodeCount: number;\r\n\tprivate readonly hasNodeLabels: boolean;\r\n\tprivate readonly hasEdgeLabels: boolean;\r\n\tprivate readonly graph: Graph;\r\n\tprivate readonly nodeNeighbors = new Map<number, number[]>();\r\n\tprivate readonly nodeKeys = new Map<number, string>();\r\n\tprivate readonly inDegrees = new Map<number, number>();\r\n\tprivate readonly outDegrees = new Map<number, number>();\r\n\r\n\tpublic constructor(\r\n\t\tgraph: Graph,\r\n\t\tnodeKeySuffixGenerator: {\r\n\t\t\t(graph: Graph, nodeIndex: number): string;\r\n\t\t} = GraphCanon.DefaultNodeKeySuffixGenerator\r\n\t) {\r\n\t\tthis.graph = graph;\r\n\t\tthis.nodeCount = graph.adjacencyMatrix.length;\r\n\t\tthis.hasNodeLabels = graph.labels !== undefined;\r\n\t\tthis.hasEdgeLabels = graph.edgeLabels !== undefined;\r\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\r\n\t\t\tconst neighbors = new Set<number>();\r\n\t\t\tlet inDegree = 0;\r\n\t\t\tlet outDegree = 0;\r\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\r\n\t\t\t\tif (graph.adjacencyMatrix[i][j] === 1) {\r\n\t\t\t\t\toutDegree++;\r\n\t\t\t\t\tneighbors.add(j);\r\n\t\t\t\t}\r\n\t\t\t\tif (graph.adjacencyMatrix[j][i] === 1) {\r\n\t\t\t\t\tinDegree++;\r\n\t\t\t\t\tneighbors.add(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inDegrees.set(i, inDegree);\r\n\t\t\tthis.outDegrees.set(i, outDegree);\r\n\t\t\tthis.nodeNeighbors.set(i, [...neighbors]);\r\n\t\t\tconst nodeKey =\r\n\t\t\t\toutDegree + '|' + inDegree + nodeKeySuffixGenerator(graph, i);\r\n\t\t\tthis.nodeKeys.set(i, nodeKey);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic canonicalize(): [Graph, string, Mapping] {\r\n\t\tconst nodeCells = new Array(this.nodeCount).fill(1);\r\n\t\tthis.partitionByPropertyKeys(nodeCells);\r\n\t\tlet lexSmallestGraph: Graph | null = null;\r\n\t\tlet lexSmallestMapping: Mapping | null = null;\r\n\t\tlet lexSmallestGraphString: string | null = null;\r\n\t\tthis.individualizeDFS(nodeCells, [], (repNodeCells, _repSuffix) => {\r\n\t\t\t// TODO: find automorphisms and prune search tree\r\n\t\t\tconst repGraph = this.buildRepresentationGraph(repNodeCells);\r\n\t\t\tconst repGraphString = this.buildGraphString(repGraph);\r\n\t\t\tif (\r\n\t\t\t\tlexSmallestGraphString === null ||\r\n\t\t\t\trepGraphString.localeCompare(lexSmallestGraphString) < 0\r\n\t\t\t) {\r\n\t\t\t\tlexSmallestGraph = repGraph;\r\n\t\t\t\tlexSmallestMapping = new Array(repNodeCells.length);\r\n\t\t\t\trepNodeCells.forEach((cell, i) => (lexSmallestMapping![cell - 1] = i));\r\n\t\t\t\tlexSmallestGraphString = repGraphString;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn [lexSmallestGraph!, lexSmallestGraphString!, lexSmallestMapping!];\r\n\t}\r\n\r\n\tprivate partitionByPropertyKeys(nodeCells: number[]) {\r\n\t\tconst propertyKeyNodeIndices = new Map<string, number[]>();\r\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\r\n\t\t\tconst key = this.nodeKeys.get(i)!;\r\n\t\t\tif (propertyKeyNodeIndices.has(key)) {\r\n\t\t\t\tpropertyKeyNodeIndices.get(key)!.push(i);\r\n\t\t\t} else {\r\n\t\t\t\tpropertyKeyNodeIndices.set(key, [i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet nextFreeCell = 1;\r\n\t\tArray.from(propertyKeyNodeIndices.keys())\r\n\t\t\t.sort((a, b) => a.localeCompare(b))\r\n\t\t\t.forEach((k) => {\r\n\t\t\t\tconst nodesInNextCell = propertyKeyNodeIndices.get(k)!;\r\n\t\t\t\tnodesInNextCell.forEach((i) => (nodeCells[i] = nextFreeCell));\r\n\t\t\t\tnextFreeCell += nodesInNextCell.length;\r\n\t\t\t});\r\n\t}\r\n\r\n\tprivate isCanon(nodeCells: number[]): boolean {\r\n\t\treturn new Set<number>(nodeCells).size === this.nodeCount;\r\n\t}\r\n\r\n\tprivate individualizeDFS(\r\n\t\tnodeCells: number[],\r\n\t\tsuffix: number[],\r\n\t\thandleRepresentation: (nodeCells: number[], suffix: number[]) => void\r\n\t) {\r\n\t\tif (this.isCanon(nodeCells)) {\r\n\t\t\thandleRepresentation(nodeCells, suffix);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.individualizationRefinement(nodeCells);\r\n\t\tif (this.isCanon(nodeCells)) {\r\n\t\t\thandleRepresentation(nodeCells, suffix);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst cells = this.getCurrentCells(nodeCells);\r\n\t\tconst cellToBreak = Array.from(cells.entries())\r\n\t\t\t.sort(([a], [b]) => a - b)\r\n\t\t\t.filter(([, nodes]) => nodes.length > 1)[0];\r\n\t\tfor (const nodeId of cellToBreak[1]) {\r\n\t\t\tconst newNodeCells = [...nodeCells];\r\n\t\t\tcellToBreak[1].forEach((n) => {\r\n\t\t\t\tif (n !== nodeId) {\r\n\t\t\t\t\tnewNodeCells[n] = cellToBreak[0] + 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.individualizeDFS(\r\n\t\t\t\tnewNodeCells,\r\n\t\t\t\t[...suffix, nodeId],\r\n\t\t\t\thandleRepresentation\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate individualizationRefinement(nodeCells: number[]) {\r\n\t\tlet isEquitable = false;\r\n\t\twhile (!isEquitable) {\r\n\t\t\tisEquitable = true;\r\n\t\t\t// Build signature for each node\r\n\t\t\tconst signatures: [string, number][] = nodeCells.map((_, i) => {\r\n\t\t\t\tconst neighborCells = this.nodeNeighbors.get(i)!.map((n) => {\r\n\t\t\t\t\tlet cellInfo = nodeCells[n].toString();\r\n\t\t\t\t\tif (this.hasEdgeLabels) {\r\n\t\t\t\t\t\tcellInfo +=\r\n\t\t\t\t\t\t\t';' +\r\n\t\t\t\t\t\t\tthis.graph.edgeLabels![i][n] +\r\n\t\t\t\t\t\t\t';' +\r\n\t\t\t\t\t\t\tthis.graph.edgeLabels![n][i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn cellInfo;\r\n\t\t\t\t});\r\n\t\t\t\tconst signature = neighborCells.sort().join('|');\r\n\t\t\t\treturn [signature, i];\r\n\t\t\t});\r\n\t\t\t// Group by current cell and signature\r\n\t\t\tconst partitionMap = new Map<number, Map<string, number[]>>();\r\n\t\t\tfor (const [signature, nodeIndex] of signatures) {\r\n\t\t\t\tconst cell = nodeCells[nodeIndex];\r\n\t\t\t\tif (!partitionMap.has(cell)) {\r\n\t\t\t\t\tpartitionMap.set(cell, new Map());\r\n\t\t\t\t}\r\n\t\t\t\tconst cellMap = partitionMap.get(cell)!;\r\n\t\t\t\tif (!cellMap.has(signature)) {\r\n\t\t\t\t\tcellMap.set(signature, []);\r\n\t\t\t\t}\r\n\t\t\t\tcellMap.get(signature)!.push(nodeIndex);\r\n\t\t\t}\r\n\t\t\t// Partition cells based on signature blocks\r\n\t\t\tconst cellIds = Array.from(partitionMap.keys()).sort();\r\n\t\t\tfor (const cellId of cellIds) {\r\n\t\t\t\tconst blocks = Array.from(partitionMap.get(cellId)!.entries());\r\n\t\t\t\tif (blocks.length > 1) {\r\n\t\t\t\t\tisEquitable = false;\r\n\t\t\t\t\t// Sort block signatures descending\r\n\t\t\t\t\tblocks.sort(([sigA], [sigB]) => sigB.localeCompare(sigA));\r\n\t\t\t\t\tlet newCellId = cellId;\r\n\t\t\t\t\tblocks.forEach(([, nodes]) => {\r\n\t\t\t\t\t\tnodes.forEach((n) => (nodeCells[n] = newCellId));\r\n\t\t\t\t\t\tnewCellId += nodes.length;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCurrentCells(nodeCells: number[]): Map<number, number[]> {\r\n\t\tconst cells = new Map<number, number[]>();\r\n\t\tnodeCells.forEach((c, i) => {\r\n\t\t\tif (cells.has(c)) {\r\n\t\t\t\tcells.get(c)!.push(i);\r\n\t\t\t} else {\r\n\t\t\t\tcells.set(c, [i]);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn cells;\r\n\t}\r\n\r\n\t/*private getCellsString(nodeCells: number[]): string {\r\n\t\tconst cells = this.getCurrentCells(nodeCells);\r\n\t\tconst cellIds = Array.from(cells.keys()).sort();\r\n\t\tlet text = '[';\r\n\t\tfor (const cellId of cellIds) {\r\n\t\t\tconst nodeIds = Array.from(cells.get(cellId)!.values()).sort();\r\n\t\t\tif (text.length > 1) {\r\n\t\t\t\ttext += '|';\r\n\t\t\t}\r\n\t\t\ttext += nodeIds.join(' ');\r\n\t\t}\r\n\t\treturn text + ']';\r\n\t}*/\r\n\r\n\tprivate buildRepresentationGraph(nodeCells: number[]): Graph {\r\n\t\tconst graph: Graph = {\r\n\t\t\tadjacencyMatrix: Array.from(\r\n\t\t\t\t{length: this.nodeCount},\r\n\t\t\t\t() => new Array(this.nodeCount)\r\n\t\t\t),\r\n\t\t};\r\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\r\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\r\n\t\t\t\tgraph.adjacencyMatrix[nodeCells[i] - 1][nodeCells[j] - 1] =\r\n\t\t\t\t\tthis.graph.adjacencyMatrix[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.hasNodeLabels) {\r\n\t\t\tgraph.labels = new Array(this.nodeCount);\r\n\t\t\tnodeCells.forEach(\r\n\t\t\t\t(c, i) => (graph.labels![c - 1] = this.graph.labels![i])\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (this.hasEdgeLabels) {\r\n\t\t\tgraph.edgeLabels = Array.from(\r\n\t\t\t\t{length: this.nodeCount},\r\n\t\t\t\t() => new Array(this.nodeCount)\r\n\t\t\t);\r\n\t\t\tfor (let i = 0; i < this.nodeCount; i++) {\r\n\t\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\r\n\t\t\t\t\tgraph.edgeLabels[nodeCells[i] - 1][nodeCells[j] - 1] =\r\n\t\t\t\t\t\tthis.graph.edgeLabels![i][j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn graph;\r\n\t}\r\n\r\n\tpublic buildGraphString(graph: Graph): string {\r\n\t\tconst edges: string[] = [];\r\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\r\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\r\n\t\t\t\tif (graph.adjacencyMatrix[i][j] === 1) {\r\n\t\t\t\t\tif (this.hasEdgeLabels) {\r\n\t\t\t\t\t\tedges.push(i + '-' + graph.edgeLabels![i][j] + '-' + j);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tedges.push(i + '-' + j);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.hasNodeLabels) {\r\n\t\t\treturn edges.join('|') + ';' + graph.labels!.join('|');\r\n\t\t}\r\n\t\treturn edges.join('|');\r\n\t}\r\n}\r\n","import {Graph} from '.';\r\n\r\nexport class ConnectedComponents {\r\n\tpublic static find(graph: Graph): number[][] {\r\n\t\tconst result: number[][] = [];\r\n\t\tconst visited = new Set<number>();\r\n\r\n\t\tconst dfs = (node: number, component: number[]) => {\r\n\t\t\tvisited.add(node);\r\n\t\t\tcomponent.push(node);\r\n\t\t\tfor (let i = 0; i < graph.adjacencyMatrix.length; i++) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tgraph.adjacencyMatrix[node][i] === 1 ||\r\n\t\t\t\t\tgraph.adjacencyMatrix[i][node] === 1\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (!visited.has(i)) {\r\n\t\t\t\t\t\tdfs(i, component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfor (let i = 0; i < graph.adjacencyMatrix.length; i++) {\r\n\t\t\tif (!visited.has(i)) {\r\n\t\t\t\tconst component: number[] = [];\r\n\t\t\t\tdfs(i, component);\r\n\t\t\t\tresult.push(component);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n"],"names":["GraphMatcher","UllmannGraphMatcher","pattern","target","nodeLabelWildcards","edgeLabelWildcards","partialMapping","n","m","isLabeled","used","mapping","nodeLabelWildcardsSet","edgeLabelWildcardsSet","patternInDegrees","patternOutDegrees","targetInDegrees","targetOutDegrees","domains","pd","i","td","j","match","depth","candidate","a","b","row","_","results","isEdgeLabeled","_GraphCanon","graph","nodeKeySuffixGenerator","__publicField","neighbors","inDegree","outDegree","nodeKey","nodeCells","lexSmallestGraph","lexSmallestMapping","lexSmallestGraphString","repNodeCells","_repSuffix","repGraph","repGraphString","cell","propertyKeyNodeIndices","key","nextFreeCell","k","nodesInNextCell","suffix","handleRepresentation","cells","cellToBreak","nodes","nodeId","newNodeCells","isEquitable","signatures","cellInfo","partitionMap","signature","nodeIndex","cellMap","cellIds","cellId","blocks","sigA","sigB","newCellId","c","edges","GraphCanon","ConnectedComponents","result","visited","dfs","node","component"],"mappings":"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"}