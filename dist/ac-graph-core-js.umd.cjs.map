{"version":3,"file":"ac-graph-core-js.umd.cjs","sources":["../src/graph/matching/GraphMatcher.ts","../src/graph/matching/UllmannGraphMatcher.ts","../src/graph/canon/GraphCanon.ts","../src/graph/ConnectedComponents.ts"],"sourcesContent":["import {Mapping} from '.';\r\nimport {Graph} from '..';\r\n\r\nexport abstract class GraphMatcher {\r\n\tpublic abstract isSubgraphIsomorphic(pattern: Graph, target: Graph): boolean;\r\n\r\n\tpublic abstract findAllSubgraphMonomorphisms(\r\n\t\tpattern: Graph,\r\n\t\ttarget: Graph\r\n\t): Mapping[];\r\n}\r\n","import {Mapping} from '.';\nimport {Graph} from '..';\nimport {GraphMatcher} from './GraphMatcher';\n\nexport class UllmannGraphMatcher extends GraphMatcher {\n\t/**\n\t * Subgraph isomorphism check\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t */\n\tpublic override isSubgraphIsomorphic(pattern: Graph, target: Graph): boolean {\n\t\t// Number of nodes in the pattern graph\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\t// Number of nodes in the target graph\n\t\tconst m = target.adjacencyMatrix.length;\n\t\t// If pattern is larger than target, no mapping is possible\n\t\tif (n > m) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isLabeled = pattern.labels && target.labels;\n\t\t// Track which target nodes are already used in the mapping\n\t\tconst used = Array(m).fill(false);\n\t\tconst mapping = Array(n).fill(-1);\n\t\t// Pre-compute degrees for pattern and target nodes\n\t\tconst patternInDegrees: number[] = [];\n\t\tconst patternOutDegrees: number[] = [];\n\t\tconst targetInDegrees: number[] = [];\n\t\tconst targetOutDegrees: number[] = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst row = pattern.adjacencyMatrix[i];\n\t\t\tpatternInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\tpatternOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => pattern.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\tfor (let i = 0; i < m; i++) {\n\t\t\tconst row = target.adjacencyMatrix[i];\n\t\t\ttargetInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\ttargetOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => target.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\t// Pre-compute candidate domains for pattern nodes based on degree\n\t\tconst domains: number[][] = patternInDegrees.map((pd, i) =>\n\t\t\ttargetInDegrees\n\t\t\t\t.map((td, j) => {\n\t\t\t\t\treturn td >= pd &&\n\t\t\t\t\t\ttargetOutDegrees[j] >= patternOutDegrees[i] &&\n\t\t\t\t\t\t(!isLabeled || pattern.labels![i] === target.labels![j])\n\t\t\t\t\t\t? j\n\t\t\t\t\t\t: -1;\n\t\t\t\t})\n\t\t\t\t.filter((j) => j !== -1)\n\t\t);\n\t\t// Recursive backtracking function to try all injective mappings\n\t\tconst match = (depth: number): boolean => {\n\t\t\tif (depth === n) {\n\t\t\t\treturn this.checkCompatibility(pattern, target, mapping);\n\t\t\t}\n\t\t\tfor (const candidate of domains[depth]) {\n\t\t\t\tif (!used[candidate]) {\n\t\t\t\t\tmapping[depth] = candidate;\n\t\t\t\t\tused[candidate] = true;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.isFeasible(pattern, target, mapping, depth) &&\n\t\t\t\t\t\tmatch(depth + 1)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Backtrack\n\t\t\t\t\tused[candidate] = false;\n\t\t\t\t\tmapping[depth] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\treturn match(0);\n\t}\n\n\t/**\n\t * Collect all possible monomorphisms of the pattern graph in the target graph\n\t * including symmetries\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t */\n\tpublic override findAllSubgraphMonomorphisms(\n\t\tpattern: Graph,\n\t\ttarget: Graph\n\t): Mapping[] {\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\tconst m = target.adjacencyMatrix.length;\n\t\tconst results: Mapping[] = [];\n\t\tif (n > m) {\n\t\t\treturn results;\n\t\t}\n\t\tconst isLabeled = pattern.labels && target.labels;\n\t\tconst used = Array(m).fill(false);\n\t\tconst mapping = Array(n).fill(-1);\n\t\tconst patternInDegrees: number[] = [];\n\t\tconst patternOutDegrees: number[] = [];\n\t\tconst targetInDegrees: number[] = [];\n\t\tconst targetOutDegrees: number[] = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst row = pattern.adjacencyMatrix[i];\n\t\t\tpatternInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\tpatternOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => pattern.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\tfor (let i = 0; i < m; i++) {\n\t\t\tconst row = target.adjacencyMatrix[i];\n\t\t\ttargetInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\ttargetOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => target.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\tconst domains: number[][] = patternInDegrees.map((pd, i) =>\n\t\t\ttargetInDegrees\n\t\t\t\t.map((td, j) => {\n\t\t\t\t\treturn td >= pd &&\n\t\t\t\t\t\ttargetOutDegrees[j] >= patternOutDegrees[i] &&\n\t\t\t\t\t\t(!isLabeled || pattern.labels![i] === target.labels![j])\n\t\t\t\t\t\t? j\n\t\t\t\t\t\t: -1;\n\t\t\t\t})\n\t\t\t\t.filter((j) => j !== -1)\n\t\t);\n\t\tconst match = (depth: number): void => {\n\t\t\tif (depth === n) {\n\t\t\t\tif (this.checkCompatibility(pattern, target, mapping)) {\n\t\t\t\t\tresults.push([...mapping]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const candidate of domains[depth]) {\n\t\t\t\tif (!used[candidate]) {\n\t\t\t\t\tmapping[depth] = candidate;\n\t\t\t\t\tused[candidate] = true;\n\t\t\t\t\tif (this.isFeasible(pattern, target, mapping, depth)) {\n\t\t\t\t\t\tmatch(depth + 1);\n\t\t\t\t\t}\n\t\t\t\t\tused[candidate] = false;\n\t\t\t\t\tmapping[depth] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tmatch(0);\n\t\treturn results;\n\t}\n\n\t/**\n\t * Feasibility check for current depth: preserve pattern edges\n\t * and edge labels if present\n\t */\n\tprivate isFeasible(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tmapping: Mapping,\n\t\tdepth: number\n\t): boolean {\n\t\tconst isEdgeLabeled = pattern.edgeLabels && target.edgeLabels;\n\t\t// Check that all edges in the current partial mapping are preserved\n\t\tfor (let i = 0; i < depth; i++) {\n\t\t\tif (pattern.adjacencyMatrix[depth][i]) {\n\t\t\t\tif (!target.adjacencyMatrix[mapping[depth]][mapping[i]]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check edge labels if present\n\t\t\t\tif (\n\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\tpattern.edgeLabels![depth][i] !==\n\t\t\t\t\t\ttarget.edgeLabels![mapping[depth]][mapping[i]]\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pattern.adjacencyMatrix[i][depth]) {\n\t\t\t\tif (!target.adjacencyMatrix[mapping[i]][mapping[depth]]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check edge labels if present\n\t\t\t\tif (\n\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\tpattern.edgeLabels![i][depth] !==\n\t\t\t\t\t\ttarget.edgeLabels![mapping[i]][mapping[depth]]\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verifies full structural consistency of the mapping\n\t */\n\tprivate checkCompatibility(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tmapping: Mapping\n\t): boolean {\n\t\tconst isEdgeLabeled = pattern.edgeLabels && target.edgeLabels;\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tfor (let j = 0; j < n; j++) {\n\t\t\t\tif (pattern.adjacencyMatrix[i][j]) {\n\t\t\t\t\tif (!target.adjacencyMatrix[mapping[i]][mapping[j]]) {\n\t\t\t\t\t\t// Mapped nodes don't preserve an edge\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\t\tpattern.edgeLabels![i][j] !==\n\t\t\t\t\t\t\ttarget.edgeLabels![mapping[i]][mapping[j]]\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Mapped nodes don't preserve an edge label\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n","import {Graph} from '..';\nimport {Mapping} from '../matching';\n\n/**\n * Nauty graph canonicalization using the following graph properties\n * for ordering and selection:\n * - First, node cell membership is sorted ascending by \"outDegree|inDegree|label?\"\n * - Second, direct neighborhood cell memberships and optional edge labels are sorted\n *   ascending, concatenated, and used to further split cells.\n *   \"neighborCell_1;outEdgeLabel_1?;inEdgeLabel_1?|neighborCell_2;outEdgeLabel_2?;inEdgeLabel_2?|...\"\n *   New cell IDs of the split are assigned by descending key order.\n * - Target cell selection in the search tree is performed by selecting the leftmost (smallest) cell ID\n *   with at least two members.\n *\n * TODO:\n * - Automorphism detection\n * - Search tree pruning\n */\nexport class GraphCanon {\n\tpublic static readonly DefaultNodeKeySuffixGenerator = (\n\t\tgraph: Graph,\n\t\tnodeIndex: number\n\t): string => {\n\t\treturn graph.labels ? graph.labels[nodeIndex] : '';\n\t};\n\n\tprivate readonly nodeCount: number;\n\tprivate readonly hasNodeLabels: boolean;\n\tprivate readonly hasEdgeLabels: boolean;\n\tprivate readonly graph: Graph;\n\tprivate readonly nodeNeighbors = new Map<number, number[]>();\n\tprivate readonly nodeKeys = new Map<number, string>();\n\tprivate readonly inDegrees = new Map<number, number>();\n\tprivate readonly outDegrees = new Map<number, number>();\n\n\tpublic constructor(\n\t\tgraph: Graph,\n\t\tnodeKeySuffixGenerator: {\n\t\t\t(graph: Graph, nodeIndex: number): string;\n\t\t} = GraphCanon.DefaultNodeKeySuffixGenerator\n\t) {\n\t\tthis.graph = graph;\n\t\tthis.nodeCount = graph.adjacencyMatrix.length;\n\t\tthis.hasNodeLabels = graph.labels !== undefined;\n\t\tthis.hasEdgeLabels = graph.edgeLabels !== undefined;\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tconst neighbors = new Set<number>();\n\t\t\tlet inDegree = 0;\n\t\t\tlet outDegree = 0;\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\tif (graph.adjacencyMatrix[i][j] === 1) {\n\t\t\t\t\toutDegree++;\n\t\t\t\t\tneighbors.add(j);\n\t\t\t\t}\n\t\t\t\tif (graph.adjacencyMatrix[j][i] === 1) {\n\t\t\t\t\tinDegree++;\n\t\t\t\t\tneighbors.add(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.inDegrees.set(i, inDegree);\n\t\t\tthis.outDegrees.set(i, outDegree);\n\t\t\tthis.nodeNeighbors.set(i, [...neighbors]);\n\t\t\tconst nodeKey =\n\t\t\t\toutDegree + '|' + inDegree + nodeKeySuffixGenerator(graph, i);\n\t\t\tthis.nodeKeys.set(i, nodeKey);\n\t\t}\n\t}\n\n\tpublic canonicalize(): [Graph, string, Mapping] {\n\t\tconst nodeCells = new Array(this.nodeCount).fill(1);\n\t\tthis.partitionByPropertyKeys(nodeCells);\n\t\tlet lexSmallestGraph: Graph | null = null;\n\t\tlet lexSmallestMapping: Mapping | null = null;\n\t\tlet lexSmallestGraphString: string | null = null;\n\t\tthis.individualizeDFS(nodeCells, [], (repNodeCells, _repSuffix) => {\n\t\t\t// TODO: find automorphisms and prune search tree\n\t\t\tconst repGraph = this.buildRepresentationGraph(repNodeCells);\n\t\t\tconst repGraphString = this.buildGraphString(repGraph);\n\t\t\tif (\n\t\t\t\tlexSmallestGraphString === null ||\n\t\t\t\trepGraphString.localeCompare(lexSmallestGraphString) < 0\n\t\t\t) {\n\t\t\t\tlexSmallestGraph = repGraph;\n\t\t\t\tlexSmallestMapping = new Array(repNodeCells.length);\n\t\t\t\trepNodeCells.forEach((cell, i) => (lexSmallestMapping![cell] = i));\n\t\t\t\tlexSmallestGraphString = repGraphString;\n\t\t\t}\n\t\t});\n\t\treturn [lexSmallestGraph!, lexSmallestGraphString!, lexSmallestMapping!];\n\t}\n\n\tprivate partitionByPropertyKeys(nodeCells: number[]) {\n\t\tconst propertyKeyNodeIndices = new Map<string, number[]>();\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tconst key = this.nodeKeys.get(i)!;\n\t\t\tif (propertyKeyNodeIndices.has(key)) {\n\t\t\t\tpropertyKeyNodeIndices.get(key)!.push(i);\n\t\t\t} else {\n\t\t\t\tpropertyKeyNodeIndices.set(key, [i]);\n\t\t\t}\n\t\t}\n\t\tlet nextFreeCell = 1;\n\t\tArray.from(propertyKeyNodeIndices.keys())\n\t\t\t.sort((a, b) => a.localeCompare(b))\n\t\t\t.forEach((k) => {\n\t\t\t\tconst nodesInNextCell = propertyKeyNodeIndices.get(k)!;\n\t\t\t\tnodesInNextCell.forEach((i) => (nodeCells[i] = nextFreeCell));\n\t\t\t\tnextFreeCell += nodesInNextCell.length;\n\t\t\t});\n\t}\n\n\tprivate isCanon(nodeCells: number[]): boolean {\n\t\treturn new Set<number>(nodeCells).size === this.nodeCount;\n\t}\n\n\tprivate individualizeDFS(\n\t\tnodeCells: number[],\n\t\tsuffix: number[],\n\t\thandleRepresentation: (nodeCells: number[], suffix: number[]) => void\n\t) {\n\t\tif (this.isCanon(nodeCells)) {\n\t\t\thandleRepresentation(nodeCells, suffix);\n\t\t\treturn;\n\t\t}\n\t\tthis.individualizationRefinement(nodeCells);\n\t\tif (this.isCanon(nodeCells)) {\n\t\t\thandleRepresentation(nodeCells, suffix);\n\t\t\treturn;\n\t\t}\n\t\tconst cells = this.getCurrentCells(nodeCells);\n\t\tconst cellToBreak = Array.from(cells.entries())\n\t\t\t.sort(([a], [b]) => a - b)\n\t\t\t.filter(([, nodes]) => nodes.length > 1)[0];\n\t\tfor (const nodeId of cellToBreak[1]) {\n\t\t\tconst newNodeCells = [...nodeCells];\n\t\t\tcellToBreak[1].forEach((n) => {\n\t\t\t\tif (n !== nodeId) {\n\t\t\t\t\tnewNodeCells[n] = cellToBreak[0] + 1;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.individualizeDFS(\n\t\t\t\tnewNodeCells,\n\t\t\t\t[...suffix, nodeId],\n\t\t\t\thandleRepresentation\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate individualizationRefinement(nodeCells: number[]) {\n\t\tlet isEquitable = false;\n\t\twhile (!isEquitable) {\n\t\t\tisEquitable = true;\n\t\t\t// Build signature for each node\n\t\t\tconst signatures: [string, number][] = nodeCells.map((_, i) => {\n\t\t\t\tconst neighborCells = this.nodeNeighbors.get(i)!.map((n) => {\n\t\t\t\t\tlet cellInfo = nodeCells[n].toString();\n\t\t\t\t\tif (this.hasEdgeLabels) {\n\t\t\t\t\t\tcellInfo +=\n\t\t\t\t\t\t\t';' +\n\t\t\t\t\t\t\tthis.graph.edgeLabels![i][n] +\n\t\t\t\t\t\t\t';' +\n\t\t\t\t\t\t\tthis.graph.edgeLabels![n][i];\n\t\t\t\t\t}\n\t\t\t\t\treturn cellInfo;\n\t\t\t\t});\n\t\t\t\tconst signature = neighborCells.sort().join('|');\n\t\t\t\treturn [signature, i];\n\t\t\t});\n\t\t\t// Group by current cell and signature\n\t\t\tconst partitionMap = new Map<number, Map<string, number[]>>();\n\t\t\tfor (const [signature, nodeIndex] of signatures) {\n\t\t\t\tconst cell = nodeCells[nodeIndex];\n\t\t\t\tif (!partitionMap.has(cell)) {\n\t\t\t\t\tpartitionMap.set(cell, new Map());\n\t\t\t\t}\n\t\t\t\tconst cellMap = partitionMap.get(cell)!;\n\t\t\t\tif (!cellMap.has(signature)) {\n\t\t\t\t\tcellMap.set(signature, []);\n\t\t\t\t}\n\t\t\t\tcellMap.get(signature)!.push(nodeIndex);\n\t\t\t}\n\t\t\t// Partition cells based on signature blocks\n\t\t\tconst cellIds = Array.from(partitionMap.keys()).sort();\n\t\t\tfor (const cellId of cellIds) {\n\t\t\t\tconst blocks = Array.from(partitionMap.get(cellId)!.entries());\n\t\t\t\tif (blocks.length > 1) {\n\t\t\t\t\tisEquitable = false;\n\t\t\t\t\t// Sort block signatures descending\n\t\t\t\t\tblocks.sort(([sigA], [sigB]) => sigB.localeCompare(sigA));\n\t\t\t\t\tlet newCellId = cellId;\n\t\t\t\t\tblocks.forEach(([, nodes]) => {\n\t\t\t\t\t\tnodes.forEach((n) => (nodeCells[n] = newCellId));\n\t\t\t\t\t\tnewCellId += nodes.length;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getCurrentCells(nodeCells: number[]): Map<number, number[]> {\n\t\tconst cells = new Map<number, number[]>();\n\t\tnodeCells.forEach((c, i) => {\n\t\t\tif (cells.has(c)) {\n\t\t\t\tcells.get(c)!.push(i);\n\t\t\t} else {\n\t\t\t\tcells.set(c, [i]);\n\t\t\t}\n\t\t});\n\t\treturn cells;\n\t}\n\n\t/*private getCellsString(nodeCells: number[]): string {\n\t\tconst cells = this.getCurrentCells(nodeCells);\n\t\tconst cellIds = Array.from(cells.keys()).sort();\n\t\tlet text = '[';\n\t\tfor (const cellId of cellIds) {\n\t\t\tconst nodeIds = Array.from(cells.get(cellId)!.values()).sort();\n\t\t\tif (text.length > 1) {\n\t\t\t\ttext += '|';\n\t\t\t}\n\t\t\ttext += nodeIds.join(' ');\n\t\t}\n\t\treturn text + ']';\n\t}*/\n\n\tprivate buildRepresentationGraph(nodeCells: number[]): Graph {\n\t\tconst graph: Graph = {\n\t\t\tadjacencyMatrix: Array.from(\n\t\t\t\t{length: this.nodeCount},\n\t\t\t\t() => new Array(this.nodeCount)\n\t\t\t),\n\t\t};\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\tgraph.adjacencyMatrix[nodeCells[i] - 1][nodeCells[j] - 1] =\n\t\t\t\t\tthis.graph.adjacencyMatrix[i][j];\n\t\t\t}\n\t\t}\n\t\tif (this.hasNodeLabels) {\n\t\t\tgraph.labels = new Array(this.nodeCount);\n\t\t\tnodeCells.forEach(\n\t\t\t\t(c, i) => (graph.labels![c - 1] = this.graph.labels![i])\n\t\t\t);\n\t\t}\n\t\tif (this.hasEdgeLabels) {\n\t\t\tgraph.edgeLabels = Array.from(\n\t\t\t\t{length: this.nodeCount},\n\t\t\t\t() => new Array(this.nodeCount)\n\t\t\t);\n\t\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\t\tgraph.edgeLabels[nodeCells[i] - 1][nodeCells[j] - 1] =\n\t\t\t\t\t\tthis.graph.edgeLabels![i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn graph;\n\t}\n\n\tpublic buildGraphString(graph: Graph): string {\n\t\tconst edges: string[] = [];\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\tif (graph.adjacencyMatrix[i][j] === 1) {\n\t\t\t\t\tif (this.hasEdgeLabels) {\n\t\t\t\t\t\tedges.push(i + '-' + graph.edgeLabels![i][j] + '-' + j);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedges.push(i + '-' + j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.hasNodeLabels) {\n\t\t\treturn edges.join('|') + ';' + graph.labels!.join('|');\n\t\t}\n\t\treturn edges.join('|');\n\t}\n}\n","import {Graph} from '.';\n\nexport class ConnectedComponents {\n\tpublic static find(graph: Graph): number[][] {\n\t\tconst result: number[][] = [];\n\t\tconst visited = new Set<number>();\n\n\t\tconst dfs = (node: number, component: number[]) => {\n\t\t\tvisited.add(node);\n\t\t\tcomponent.push(node);\n\t\t\tfor (let i = 0; i < graph.adjacencyMatrix.length; i++) {\n\t\t\t\tif (\n\t\t\t\t\tgraph.adjacencyMatrix[node][i] === 1 ||\n\t\t\t\t\tgraph.adjacencyMatrix[i][node] === 1\n\t\t\t\t) {\n\t\t\t\t\tif (!visited.has(i)) {\n\t\t\t\t\t\tdfs(i, component);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (let i = 0; i < graph.adjacencyMatrix.length; i++) {\n\t\t\tif (!visited.has(i)) {\n\t\t\t\tconst component: number[] = [];\n\t\t\t\tdfs(i, component);\n\t\t\t\tresult.push(component);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"],"names":["GraphMatcher","UllmannGraphMatcher","pattern","target","n","m","isLabeled","used","mapping","patternInDegrees","patternOutDegrees","targetInDegrees","targetOutDegrees","i","row","a","b","_","j","domains","pd","td","match","depth","candidate","results","isEdgeLabeled","_GraphCanon","graph","nodeKeySuffixGenerator","__publicField","neighbors","inDegree","outDegree","nodeKey","nodeCells","lexSmallestGraph","lexSmallestMapping","lexSmallestGraphString","repNodeCells","_repSuffix","repGraph","repGraphString","cell","propertyKeyNodeIndices","key","nextFreeCell","k","nodesInNextCell","suffix","handleRepresentation","cells","cellToBreak","nodes","nodeId","newNodeCells","isEquitable","signatures","cellInfo","partitionMap","signature","nodeIndex","cellMap","cellIds","cellId","blocks","sigA","sigB","newCellId","c","edges","GraphCanon","ConnectedComponents","result","visited","dfs","node","component"],"mappings":"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"}