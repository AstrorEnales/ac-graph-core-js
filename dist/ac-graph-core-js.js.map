{"version":3,"file":"ac-graph-core-js.js","sources":["../src/graph/matching/GraphMatcher.ts","../src/graph/matching/UllmannGraphMatcher.ts","../src/graph/canon/GraphCanon.ts","../src/graph/ConnectedComponents.ts"],"sourcesContent":["import {Mapping} from '.';\r\nimport {Graph} from '..';\r\n\r\nexport abstract class GraphMatcher {\r\n\tpublic abstract isSubgraphIsomorphic(pattern: Graph, target: Graph): boolean;\r\n\r\n\tpublic abstract findAllSubgraphMonomorphisms(\r\n\t\tpattern: Graph,\r\n\t\ttarget: Graph\r\n\t): Mapping[];\r\n}\r\n","import {Mapping} from '.';\nimport {Graph} from '..';\nimport {GraphMatcher} from './GraphMatcher';\n\nexport class UllmannGraphMatcher extends GraphMatcher {\n\t/**\n\t * Subgraph isomorphism check\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t */\n\tpublic override isSubgraphIsomorphic(pattern: Graph, target: Graph): boolean {\n\t\t// Number of nodes in the pattern graph\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\t// Number of nodes in the target graph\n\t\tconst m = target.adjacencyMatrix.length;\n\t\t// If pattern is larger than target, no mapping is possible\n\t\tif (n > m) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isLabeled = pattern.labels && target.labels;\n\t\t// Track which target nodes are already used in the mapping\n\t\tconst used = Array(m).fill(false);\n\t\tconst mapping = Array(n).fill(-1);\n\t\t// Pre-compute degrees for pattern and target nodes\n\t\tconst patternInDegrees: number[] = [];\n\t\tconst patternOutDegrees: number[] = [];\n\t\tconst targetInDegrees: number[] = [];\n\t\tconst targetOutDegrees: number[] = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst row = pattern.adjacencyMatrix[i];\n\t\t\tpatternInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\tpatternOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => pattern.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\tfor (let i = 0; i < m; i++) {\n\t\t\tconst row = target.adjacencyMatrix[i];\n\t\t\ttargetInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\ttargetOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => target.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\t// Pre-compute candidate domains for pattern nodes based on degree\n\t\tconst domains: number[][] = patternInDegrees.map((pd, i) =>\n\t\t\ttargetInDegrees\n\t\t\t\t.map((td, j) => {\n\t\t\t\t\treturn td >= pd &&\n\t\t\t\t\t\ttargetOutDegrees[j] >= patternOutDegrees[i] &&\n\t\t\t\t\t\t(!isLabeled || pattern.labels![i] === target.labels![j])\n\t\t\t\t\t\t? j\n\t\t\t\t\t\t: -1;\n\t\t\t\t})\n\t\t\t\t.filter((j) => j !== -1)\n\t\t);\n\t\t// Recursive backtracking function to try all injective mappings\n\t\tconst match = (depth: number): boolean => {\n\t\t\tif (depth === n) {\n\t\t\t\treturn this.checkCompatibility(pattern, target, mapping);\n\t\t\t}\n\t\t\tfor (const candidate of domains[depth]) {\n\t\t\t\tif (!used[candidate]) {\n\t\t\t\t\tmapping[depth] = candidate;\n\t\t\t\t\tused[candidate] = true;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.isFeasible(pattern, target, mapping, depth) &&\n\t\t\t\t\t\tmatch(depth + 1)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Backtrack\n\t\t\t\t\tused[candidate] = false;\n\t\t\t\t\tmapping[depth] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\treturn match(0);\n\t}\n\n\t/**\n\t * Collect all possible monomorphisms of the pattern graph in the target graph\n\t * including symmetries\n\t * @param pattern Pattern graph adjacency matrix\n\t * @param target Target graph adjacency matrix\n\t */\n\tpublic override findAllSubgraphMonomorphisms(\n\t\tpattern: Graph,\n\t\ttarget: Graph\n\t): Mapping[] {\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\tconst m = target.adjacencyMatrix.length;\n\t\tconst results: Mapping[] = [];\n\t\tif (n > m) {\n\t\t\treturn results;\n\t\t}\n\t\tconst isLabeled = pattern.labels && target.labels;\n\t\tconst used = Array(m).fill(false);\n\t\tconst mapping = Array(n).fill(-1);\n\t\tconst patternInDegrees: number[] = [];\n\t\tconst patternOutDegrees: number[] = [];\n\t\tconst targetInDegrees: number[] = [];\n\t\tconst targetOutDegrees: number[] = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst row = pattern.adjacencyMatrix[i];\n\t\t\tpatternInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\tpatternOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => pattern.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\tfor (let i = 0; i < m; i++) {\n\t\t\tconst row = target.adjacencyMatrix[i];\n\t\t\ttargetInDegrees.push(row.reduce((a, b) => a + b, 0));\n\t\t\ttargetOutDegrees.push(\n\t\t\t\trow\n\t\t\t\t\t.map((_, j) => target.adjacencyMatrix[j][i])\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t);\n\t\t}\n\t\tconst domains: number[][] = patternInDegrees.map((pd, i) =>\n\t\t\ttargetInDegrees\n\t\t\t\t.map((td, j) => {\n\t\t\t\t\treturn td >= pd &&\n\t\t\t\t\t\ttargetOutDegrees[j] >= patternOutDegrees[i] &&\n\t\t\t\t\t\t(!isLabeled || pattern.labels![i] === target.labels![j])\n\t\t\t\t\t\t? j\n\t\t\t\t\t\t: -1;\n\t\t\t\t})\n\t\t\t\t.filter((j) => j !== -1)\n\t\t);\n\t\tconst match = (depth: number): void => {\n\t\t\tif (depth === n) {\n\t\t\t\tif (this.checkCompatibility(pattern, target, mapping)) {\n\t\t\t\t\tresults.push([...mapping]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const candidate of domains[depth]) {\n\t\t\t\tif (!used[candidate]) {\n\t\t\t\t\tmapping[depth] = candidate;\n\t\t\t\t\tused[candidate] = true;\n\t\t\t\t\tif (this.isFeasible(pattern, target, mapping, depth)) {\n\t\t\t\t\t\tmatch(depth + 1);\n\t\t\t\t\t}\n\t\t\t\t\tused[candidate] = false;\n\t\t\t\t\tmapping[depth] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tmatch(0);\n\t\treturn results;\n\t}\n\n\t/**\n\t * Feasibility check for current depth: preserve pattern edges\n\t * and edge labels if present\n\t */\n\tprivate isFeasible(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tmapping: Mapping,\n\t\tdepth: number\n\t): boolean {\n\t\tconst isEdgeLabeled = pattern.edgeLabels && target.edgeLabels;\n\t\t// Check that all edges in the current partial mapping are preserved\n\t\tfor (let i = 0; i < depth; i++) {\n\t\t\tif (pattern.adjacencyMatrix[depth][i]) {\n\t\t\t\tif (!target.adjacencyMatrix[mapping[depth]][mapping[i]]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check edge labels if present\n\t\t\t\tif (\n\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\tpattern.edgeLabels![depth][i] !==\n\t\t\t\t\t\ttarget.edgeLabels![mapping[depth]][mapping[i]]\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pattern.adjacencyMatrix[i][depth]) {\n\t\t\t\tif (!target.adjacencyMatrix[mapping[i]][mapping[depth]]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check edge labels if present\n\t\t\t\tif (\n\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\tpattern.edgeLabels![i][depth] !==\n\t\t\t\t\t\ttarget.edgeLabels![mapping[i]][mapping[depth]]\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verifies full structural consistency of the mapping\n\t */\n\tprivate checkCompatibility(\n\t\tpattern: Graph,\n\t\ttarget: Graph,\n\t\tmapping: Mapping\n\t): boolean {\n\t\tconst isEdgeLabeled = pattern.edgeLabels && target.edgeLabels;\n\t\tconst n = pattern.adjacencyMatrix.length;\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tfor (let j = 0; j < n; j++) {\n\t\t\t\tif (pattern.adjacencyMatrix[i][j]) {\n\t\t\t\t\tif (!target.adjacencyMatrix[mapping[i]][mapping[j]]) {\n\t\t\t\t\t\t// Mapped nodes don't preserve an edge\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEdgeLabeled &&\n\t\t\t\t\t\tpattern.edgeLabels![i][j] !==\n\t\t\t\t\t\t\ttarget.edgeLabels![mapping[i]][mapping[j]]\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Mapped nodes don't preserve an edge label\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n","import {Graph} from '..';\nimport {Mapping} from '../matching';\n\n/**\n * Nauty graph canonicalization using the following graph properties\n * for ordering and selection:\n * - First, node cell membership is sorted ascending by \"outDegree|inDegree|label?\"\n * - Second, direct neighborhood cell memberships and optional edge labels are sorted\n *   ascending, concatenated, and used to further split cells.\n *   \"neighborCell_1;outEdgeLabel_1?;inEdgeLabel_1?|neighborCell_2;outEdgeLabel_2?;inEdgeLabel_2?|...\"\n *   New cell IDs of the split are assigned by descending key order.\n * - Target cell selection in the search tree is performed by selecting the leftmost (smallest) cell ID\n *   with at least two members.\n *\n * TODO:\n * - Automorphism detection\n * - Search tree pruning\n */\nexport class GraphCanon {\n\tpublic static readonly DefaultNodeKeySuffixGenerator = (\n\t\tgraph: Graph,\n\t\tnodeIndex: number\n\t): string => {\n\t\treturn graph.labels ? graph.labels[nodeIndex] : '';\n\t};\n\n\tprivate readonly nodeCount: number;\n\tprivate readonly hasNodeLabels: boolean;\n\tprivate readonly hasEdgeLabels: boolean;\n\tprivate readonly graph: Graph;\n\tprivate readonly nodeNeighbors = new Map<number, number[]>();\n\tprivate readonly nodeKeys = new Map<number, string>();\n\tprivate readonly inDegrees = new Map<number, number>();\n\tprivate readonly outDegrees = new Map<number, number>();\n\n\tpublic constructor(\n\t\tgraph: Graph,\n\t\tnodeKeySuffixGenerator: {\n\t\t\t(graph: Graph, nodeIndex: number): string;\n\t\t} = GraphCanon.DefaultNodeKeySuffixGenerator\n\t) {\n\t\tthis.graph = graph;\n\t\tthis.nodeCount = graph.adjacencyMatrix.length;\n\t\tthis.hasNodeLabels = graph.labels !== undefined;\n\t\tthis.hasEdgeLabels = graph.edgeLabels !== undefined;\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tconst neighbors = new Set<number>();\n\t\t\tlet inDegree = 0;\n\t\t\tlet outDegree = 0;\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\tif (graph.adjacencyMatrix[i][j] === 1) {\n\t\t\t\t\toutDegree++;\n\t\t\t\t\tneighbors.add(j);\n\t\t\t\t}\n\t\t\t\tif (graph.adjacencyMatrix[j][i] === 1) {\n\t\t\t\t\tinDegree++;\n\t\t\t\t\tneighbors.add(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.inDegrees.set(i, inDegree);\n\t\t\tthis.outDegrees.set(i, outDegree);\n\t\t\tthis.nodeNeighbors.set(i, [...neighbors]);\n\t\t\tconst nodeKey =\n\t\t\t\toutDegree + '|' + inDegree + nodeKeySuffixGenerator(graph, i);\n\t\t\tthis.nodeKeys.set(i, nodeKey);\n\t\t}\n\t}\n\n\tpublic canonicalize(): [Graph, string, Mapping] {\n\t\tconst nodeCells = new Array(this.nodeCount).fill(1);\n\t\tthis.partitionByPropertyKeys(nodeCells);\n\t\tlet lexSmallestGraph: Graph | null = null;\n\t\tlet lexSmallestMapping: Mapping | null = null;\n\t\tlet lexSmallestGraphString: string | null = null;\n\t\tthis.individualizeDFS(nodeCells, [], (repNodeCells, _repSuffix) => {\n\t\t\t// TODO: find automorphisms and prune search tree\n\t\t\tconst repGraph = this.buildRepresentationGraph(repNodeCells);\n\t\t\tconst repGraphString = this.buildGraphString(repGraph);\n\t\t\tif (\n\t\t\t\tlexSmallestGraphString === null ||\n\t\t\t\trepGraphString.localeCompare(lexSmallestGraphString) < 0\n\t\t\t) {\n\t\t\t\tlexSmallestGraph = repGraph;\n\t\t\t\tlexSmallestMapping = new Array(repNodeCells.length);\n\t\t\t\trepNodeCells.forEach((cell, i) => (lexSmallestMapping![cell - 1] = i));\n\t\t\t\tlexSmallestGraphString = repGraphString;\n\t\t\t}\n\t\t});\n\t\treturn [lexSmallestGraph!, lexSmallestGraphString!, lexSmallestMapping!];\n\t}\n\n\tprivate partitionByPropertyKeys(nodeCells: number[]) {\n\t\tconst propertyKeyNodeIndices = new Map<string, number[]>();\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tconst key = this.nodeKeys.get(i)!;\n\t\t\tif (propertyKeyNodeIndices.has(key)) {\n\t\t\t\tpropertyKeyNodeIndices.get(key)!.push(i);\n\t\t\t} else {\n\t\t\t\tpropertyKeyNodeIndices.set(key, [i]);\n\t\t\t}\n\t\t}\n\t\tlet nextFreeCell = 1;\n\t\tArray.from(propertyKeyNodeIndices.keys())\n\t\t\t.sort((a, b) => a.localeCompare(b))\n\t\t\t.forEach((k) => {\n\t\t\t\tconst nodesInNextCell = propertyKeyNodeIndices.get(k)!;\n\t\t\t\tnodesInNextCell.forEach((i) => (nodeCells[i] = nextFreeCell));\n\t\t\t\tnextFreeCell += nodesInNextCell.length;\n\t\t\t});\n\t}\n\n\tprivate isCanon(nodeCells: number[]): boolean {\n\t\treturn new Set<number>(nodeCells).size === this.nodeCount;\n\t}\n\n\tprivate individualizeDFS(\n\t\tnodeCells: number[],\n\t\tsuffix: number[],\n\t\thandleRepresentation: (nodeCells: number[], suffix: number[]) => void\n\t) {\n\t\tif (this.isCanon(nodeCells)) {\n\t\t\thandleRepresentation(nodeCells, suffix);\n\t\t\treturn;\n\t\t}\n\t\tthis.individualizationRefinement(nodeCells);\n\t\tif (this.isCanon(nodeCells)) {\n\t\t\thandleRepresentation(nodeCells, suffix);\n\t\t\treturn;\n\t\t}\n\t\tconst cells = this.getCurrentCells(nodeCells);\n\t\tconst cellToBreak = Array.from(cells.entries())\n\t\t\t.sort(([a], [b]) => a - b)\n\t\t\t.filter(([, nodes]) => nodes.length > 1)[0];\n\t\tfor (const nodeId of cellToBreak[1]) {\n\t\t\tconst newNodeCells = [...nodeCells];\n\t\t\tcellToBreak[1].forEach((n) => {\n\t\t\t\tif (n !== nodeId) {\n\t\t\t\t\tnewNodeCells[n] = cellToBreak[0] + 1;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.individualizeDFS(\n\t\t\t\tnewNodeCells,\n\t\t\t\t[...suffix, nodeId],\n\t\t\t\thandleRepresentation\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate individualizationRefinement(nodeCells: number[]) {\n\t\tlet isEquitable = false;\n\t\twhile (!isEquitable) {\n\t\t\tisEquitable = true;\n\t\t\t// Build signature for each node\n\t\t\tconst signatures: [string, number][] = nodeCells.map((_, i) => {\n\t\t\t\tconst neighborCells = this.nodeNeighbors.get(i)!.map((n) => {\n\t\t\t\t\tlet cellInfo = nodeCells[n].toString();\n\t\t\t\t\tif (this.hasEdgeLabels) {\n\t\t\t\t\t\tcellInfo +=\n\t\t\t\t\t\t\t';' +\n\t\t\t\t\t\t\tthis.graph.edgeLabels![i][n] +\n\t\t\t\t\t\t\t';' +\n\t\t\t\t\t\t\tthis.graph.edgeLabels![n][i];\n\t\t\t\t\t}\n\t\t\t\t\treturn cellInfo;\n\t\t\t\t});\n\t\t\t\tconst signature = neighborCells.sort().join('|');\n\t\t\t\treturn [signature, i];\n\t\t\t});\n\t\t\t// Group by current cell and signature\n\t\t\tconst partitionMap = new Map<number, Map<string, number[]>>();\n\t\t\tfor (const [signature, nodeIndex] of signatures) {\n\t\t\t\tconst cell = nodeCells[nodeIndex];\n\t\t\t\tif (!partitionMap.has(cell)) {\n\t\t\t\t\tpartitionMap.set(cell, new Map());\n\t\t\t\t}\n\t\t\t\tconst cellMap = partitionMap.get(cell)!;\n\t\t\t\tif (!cellMap.has(signature)) {\n\t\t\t\t\tcellMap.set(signature, []);\n\t\t\t\t}\n\t\t\t\tcellMap.get(signature)!.push(nodeIndex);\n\t\t\t}\n\t\t\t// Partition cells based on signature blocks\n\t\t\tconst cellIds = Array.from(partitionMap.keys()).sort();\n\t\t\tfor (const cellId of cellIds) {\n\t\t\t\tconst blocks = Array.from(partitionMap.get(cellId)!.entries());\n\t\t\t\tif (blocks.length > 1) {\n\t\t\t\t\tisEquitable = false;\n\t\t\t\t\t// Sort block signatures descending\n\t\t\t\t\tblocks.sort(([sigA], [sigB]) => sigB.localeCompare(sigA));\n\t\t\t\t\tlet newCellId = cellId;\n\t\t\t\t\tblocks.forEach(([, nodes]) => {\n\t\t\t\t\t\tnodes.forEach((n) => (nodeCells[n] = newCellId));\n\t\t\t\t\t\tnewCellId += nodes.length;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getCurrentCells(nodeCells: number[]): Map<number, number[]> {\n\t\tconst cells = new Map<number, number[]>();\n\t\tnodeCells.forEach((c, i) => {\n\t\t\tif (cells.has(c)) {\n\t\t\t\tcells.get(c)!.push(i);\n\t\t\t} else {\n\t\t\t\tcells.set(c, [i]);\n\t\t\t}\n\t\t});\n\t\treturn cells;\n\t}\n\n\t/*private getCellsString(nodeCells: number[]): string {\n\t\tconst cells = this.getCurrentCells(nodeCells);\n\t\tconst cellIds = Array.from(cells.keys()).sort();\n\t\tlet text = '[';\n\t\tfor (const cellId of cellIds) {\n\t\t\tconst nodeIds = Array.from(cells.get(cellId)!.values()).sort();\n\t\t\tif (text.length > 1) {\n\t\t\t\ttext += '|';\n\t\t\t}\n\t\t\ttext += nodeIds.join(' ');\n\t\t}\n\t\treturn text + ']';\n\t}*/\n\n\tprivate buildRepresentationGraph(nodeCells: number[]): Graph {\n\t\tconst graph: Graph = {\n\t\t\tadjacencyMatrix: Array.from(\n\t\t\t\t{length: this.nodeCount},\n\t\t\t\t() => new Array(this.nodeCount)\n\t\t\t),\n\t\t};\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\tgraph.adjacencyMatrix[nodeCells[i] - 1][nodeCells[j] - 1] =\n\t\t\t\t\tthis.graph.adjacencyMatrix[i][j];\n\t\t\t}\n\t\t}\n\t\tif (this.hasNodeLabels) {\n\t\t\tgraph.labels = new Array(this.nodeCount);\n\t\t\tnodeCells.forEach(\n\t\t\t\t(c, i) => (graph.labels![c - 1] = this.graph.labels![i])\n\t\t\t);\n\t\t}\n\t\tif (this.hasEdgeLabels) {\n\t\t\tgraph.edgeLabels = Array.from(\n\t\t\t\t{length: this.nodeCount},\n\t\t\t\t() => new Array(this.nodeCount)\n\t\t\t);\n\t\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\t\tgraph.edgeLabels[nodeCells[i] - 1][nodeCells[j] - 1] =\n\t\t\t\t\t\tthis.graph.edgeLabels![i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn graph;\n\t}\n\n\tpublic buildGraphString(graph: Graph): string {\n\t\tconst edges: string[] = [];\n\t\tfor (let i = 0; i < this.nodeCount; i++) {\n\t\t\tfor (let j = 0; j < this.nodeCount; j++) {\n\t\t\t\tif (graph.adjacencyMatrix[i][j] === 1) {\n\t\t\t\t\tif (this.hasEdgeLabels) {\n\t\t\t\t\t\tedges.push(i + '-' + graph.edgeLabels![i][j] + '-' + j);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedges.push(i + '-' + j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.hasNodeLabels) {\n\t\t\treturn edges.join('|') + ';' + graph.labels!.join('|');\n\t\t}\n\t\treturn edges.join('|');\n\t}\n}\n","import {Graph} from '.';\n\nexport class ConnectedComponents {\n\tpublic static find(graph: Graph): number[][] {\n\t\tconst result: number[][] = [];\n\t\tconst visited = new Set<number>();\n\n\t\tconst dfs = (node: number, component: number[]) => {\n\t\t\tvisited.add(node);\n\t\t\tcomponent.push(node);\n\t\t\tfor (let i = 0; i < graph.adjacencyMatrix.length; i++) {\n\t\t\t\tif (\n\t\t\t\t\tgraph.adjacencyMatrix[node][i] === 1 ||\n\t\t\t\t\tgraph.adjacencyMatrix[i][node] === 1\n\t\t\t\t) {\n\t\t\t\t\tif (!visited.has(i)) {\n\t\t\t\t\t\tdfs(i, component);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (let i = 0; i < graph.adjacencyMatrix.length; i++) {\n\t\t\tif (!visited.has(i)) {\n\t\t\t\tconst component: number[] = [];\n\t\t\t\tdfs(i, component);\n\t\t\t\tresult.push(component);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"],"names":["GraphMatcher","UllmannGraphMatcher","pattern","target","n","m","isLabeled","used","mapping","patternInDegrees","patternOutDegrees","targetInDegrees","targetOutDegrees","i","row","a","b","_","j","domains","pd","td","match","depth","candidate","results","isEdgeLabeled","_GraphCanon","graph","nodeKeySuffixGenerator","__publicField","neighbors","inDegree","outDegree","nodeKey","nodeCells","lexSmallestGraph","lexSmallestMapping","lexSmallestGraphString","repNodeCells","_repSuffix","repGraph","repGraphString","cell","propertyKeyNodeIndices","key","nextFreeCell","k","nodesInNextCell","suffix","handleRepresentation","cells","cellToBreak","nodes","nodeId","newNodeCells","isEquitable","signatures","cellInfo","partitionMap","signature","nodeIndex","cellMap","cellIds","cellId","blocks","sigA","sigB","newCellId","c","edges","GraphCanon","ConnectedComponents","result","visited","dfs","node","component"],"mappings":"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"}