(function(g,b){typeof exports=="object"&&typeof module<"u"?b(exports):typeof define=="function"&&define.amd?define(["exports"],b):(g=typeof globalThis<"u"?globalThis:g||self,b(g.ACGraphCore={}))})(this,function(g){"use strict";var A=Object.defineProperty;var _=(g,b,x)=>b in g?A(g,b,{enumerable:!0,configurable:!0,writable:!0,value:x}):g[b]=x;var M=(g,b,x)=>_(g,typeof b!="symbol"?b+"":b,x);class b{}class x extends b{isSubgraphIsomorphic(e,n){const s=e.adjacencyMatrix.length,t=n.adjacencyMatrix.length;if(s>t)return!1;const a=e.labels&&n.labels,i=Array(t).fill(!1),r=Array(s).fill(-1),u=[],f=[],y=[],j=[];for(let d=0;d<s;d++){const o=e.adjacencyMatrix[d];u.push(o.reduce((c,l)=>c+l,0)),f.push(o.map((c,l)=>e.adjacencyMatrix[l][d]).reduce((c,l)=>c+l,0))}for(let d=0;d<t;d++){const o=n.adjacencyMatrix[d];y.push(o.reduce((c,l)=>c+l,0)),j.push(o.map((c,l)=>n.adjacencyMatrix[l][d]).reduce((c,l)=>c+l,0))}const L=u.map((d,o)=>y.map((c,l)=>c>=d&&j[l]>=f[o]&&(!a||e.labels[o]===n.labels[l])?l:-1).filter(c=>c!==-1)),p=d=>{if(d===s)return this.checkCompatibility(e,n,r);for(const o of L[d])if(!i[o]){if(r[d]=o,i[o]=!0,this.isFeasible(e,n,r,d)&&p(d+1))return!0;i[o]=!1,r[d]=-1}return!1};return p(0)}findAllSubgraphMonomorphisms(e,n){const s=e.adjacencyMatrix.length,t=n.adjacencyMatrix.length,a=[];if(s>t)return a;const i=e.labels&&n.labels,r=Array(t).fill(!1),u=Array(s).fill(-1),f=[],y=[],j=[],L=[];for(let o=0;o<s;o++){const c=e.adjacencyMatrix[o];f.push(c.reduce((l,h)=>l+h,0)),y.push(c.map((l,h)=>e.adjacencyMatrix[h][o]).reduce((l,h)=>l+h,0))}for(let o=0;o<t;o++){const c=n.adjacencyMatrix[o];j.push(c.reduce((l,h)=>l+h,0)),L.push(c.map((l,h)=>n.adjacencyMatrix[h][o]).reduce((l,h)=>l+h,0))}const p=f.map((o,c)=>j.map((l,h)=>l>=o&&L[h]>=y[c]&&(!i||e.labels[c]===n.labels[h])?h:-1).filter(l=>l!==-1)),d=o=>{if(o===s){this.checkCompatibility(e,n,u)&&a.push([...u]);return}for(const c of p[o])r[c]||(u[o]=c,r[c]=!0,this.isFeasible(e,n,u,o)&&d(o+1),r[c]=!1,u[o]=-1)};return d(0),a}isFeasible(e,n,s,t){const a=e.edgeLabels&&n.edgeLabels;for(let i=0;i<t;i++)if(e.adjacencyMatrix[t][i]&&(!n.adjacencyMatrix[s[t]][s[i]]||a&&e.edgeLabels[t][i]!==n.edgeLabels[s[t]][s[i]])||e.adjacencyMatrix[i][t]&&(!n.adjacencyMatrix[s[i]][s[t]]||a&&e.edgeLabels[i][t]!==n.edgeLabels[s[i]][s[t]]))return!1;return!0}checkCompatibility(e,n,s){const t=e.edgeLabels&&n.edgeLabels,a=e.adjacencyMatrix.length;for(let i=0;i<a;i++)for(let r=0;r<a;r++)if(e.adjacencyMatrix[i][r]&&(!n.adjacencyMatrix[s[i]][s[r]]||t&&e.edgeLabels[i][r]!==n.edgeLabels[s[i]][s[r]]))return!1;return!0}}const S=Object.freeze(Object.defineProperty({__proto__:null,GraphMatcher:b,UllmannGraphMatcher:x},Symbol.toStringTag,{value:"Module"})),m=class m{constructor(e,n=m.DefaultNodeKeySuffixGenerator){M(this,"nodeCount");M(this,"hasNodeLabels");M(this,"hasEdgeLabels");M(this,"graph");M(this,"nodeNeighbors",new Map);M(this,"nodeKeys",new Map);M(this,"inDegrees",new Map);M(this,"outDegrees",new Map);this.graph=e,this.nodeCount=e.adjacencyMatrix.length,this.hasNodeLabels=e.labels!==void 0,this.hasEdgeLabels=e.edgeLabels!==void 0;for(let s=0;s<this.nodeCount;s++){const t=new Set;let a=0,i=0;for(let u=0;u<this.nodeCount;u++)e.adjacencyMatrix[s][u]===1&&(i++,t.add(u)),e.adjacencyMatrix[u][s]===1&&(a++,t.add(u));this.inDegrees.set(s,a),this.outDegrees.set(s,i),this.nodeNeighbors.set(s,[...t]);const r=i+"|"+a+n(e,s);this.nodeKeys.set(s,r)}}canonicalize(){const e=new Array(this.nodeCount).fill(1);this.partitionByPropertyKeys(e);let n=null,s=null;return this.individualizeDFS(e,[],(t,a)=>{const i=this.buildRepresentationGraph(t),r=this.buildGraphString(i);(s===null||r.localeCompare(s)<0)&&(n=i,s=r)}),n}partitionByPropertyKeys(e){const n=new Map;for(let t=0;t<this.nodeCount;t++){const a=this.nodeKeys.get(t);n.has(a)?n.get(a).push(t):n.set(a,[t])}let s=1;Array.from(n.keys()).sort((t,a)=>t.localeCompare(a)).forEach(t=>{const a=n.get(t);a.forEach(i=>e[i]=s),s+=a.length})}isCanon(e){return new Set(e).size===this.nodeCount}individualizeDFS(e,n,s){if(this.isCanon(e)){s(e,n);return}if(this.individualizationRefinement(e),this.isCanon(e)){s(e,n);return}const t=this.getCurrentCells(e),a=Array.from(t.entries()).sort(([i],[r])=>i-r).filter(([,i])=>i.length>1)[0];for(const i of a[1]){const r=[...e];a[1].forEach(u=>{u!==i&&(r[u]=a[0]+1)}),this.individualizeDFS(r,[...n,i],s)}}individualizationRefinement(e){let n=!1;for(;!n;){n=!0;const s=e.map((i,r)=>[this.nodeNeighbors.get(r).map(y=>{let j=e[y].toString();return this.hasEdgeLabels&&(j+=";"+this.graph.edgeLabels[r][y]+";"+this.graph.edgeLabels[y][r]),j}).sort().join("|"),r]),t=new Map;for(const[i,r]of s){const u=e[r];t.has(u)||t.set(u,new Map);const f=t.get(u);f.has(i)||f.set(i,[]),f.get(i).push(r)}const a=Array.from(t.keys()).sort();for(const i of a){const r=Array.from(t.get(i).entries());if(r.length>1){n=!1,r.sort(([f],[y])=>y.localeCompare(f));let u=i;r.forEach(([,f])=>{f.forEach(y=>e[y]=u),u+=f.length});break}}}}getCurrentCells(e){const n=new Map;return e.forEach((s,t)=>{n.has(s)?n.get(s).push(t):n.set(s,[t])}),n}buildRepresentationGraph(e){const n={adjacencyMatrix:Array.from({length:this.nodeCount},()=>new Array(this.nodeCount))};for(let s=0;s<this.nodeCount;s++)for(let t=0;t<this.nodeCount;t++)n.adjacencyMatrix[e[s]-1][e[t]-1]=this.graph.adjacencyMatrix[s][t];if(this.hasNodeLabels&&(n.labels=new Array(this.nodeCount),e.forEach((s,t)=>n.labels[s-1]=this.graph.labels[t])),this.hasEdgeLabels){n.edgeLabels=Array.from({length:this.nodeCount},()=>new Array(this.nodeCount));for(let s=0;s<this.nodeCount;s++)for(let t=0;t<this.nodeCount;t++)n.edgeLabels[e[s]-1][e[t]-1]=this.graph.edgeLabels[s][t]}return n}buildGraphString(e){const n=[];for(let s=0;s<this.nodeCount;s++)for(let t=0;t<this.nodeCount;t++)e.adjacencyMatrix[s][t]===1&&(this.hasEdgeLabels?n.push(s+"-"+e.edgeLabels[s][t]+"-"+t):n.push(s+"-"+t));return this.hasNodeLabels?n.join("|")+";"+e.labels.join("|"):n.join("|")}};M(m,"DefaultNodeKeySuffixGenerator",(e,n)=>e.labels?e.labels[n]:"");let C=m;const w=Object.freeze(Object.defineProperty({__proto__:null,canon:Object.freeze(Object.defineProperty({__proto__:null,GraphCanon:C},Symbol.toStringTag,{value:"Module"})),matching:S},Symbol.toStringTag,{value:"Module"}));g.graph=w,Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=ac-graph-core-js.umd.cjs.map
